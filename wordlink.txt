WordLink thoughts/notes
------------------------

main loop

while(1)
{
	if (searching)	//looking for a chain - don't lock up
	  search_a_bit()

	if event()
		if (touch)	//handle touch events, update logic
		
		if(timer && queue empty)
			draw_screen()	//global var knows whether we're in title, menu or game
	endif		
}

title-> menu or game

menu
  difficulty - choices for:
    word length, (4,5,6,random)
    chain length, (same as word length, 4,5,6,random)
    letter change more than once (
    random on each one?
  
game
  draw:
    - status bar: points, hints, levels, 
    - chain 
      1:start word
      2:start word (greyed)
      3:blank
      4:blank
       :.....
      n:last
    - alphabet (smaller - 2x13? 3x9? 4*7?)
    
  drag letter from alphabet to '2'
  if in dict
  	2 -> 'solid' with new letter, 3-> 2(greyed) - points++, hints++
  else ???
    not sure how to indicate.....
    OK, put (green?) tick for correct, plus sound
    put red tick for wrong for ~0.5s, then revert (plus sound, plus vibrarte?)
  if 
  
  
typedef enum
{
  START = 0,
  CURRENT = 1,
  BLANK = 2,
  LAST = 3,
}
WordStatusType;

  
struct
{
  char cpu[7]
  char user[7]
  WordStatusType status;
}
ChainEntryType;

struct 
{
  ChainEntryType word[7];
  ChainEntryType* current;
  int length; //?
  int word_length;
}
ChainType;

ChainType Chain;

usage:
 Chain.length
 Chain.word_length
 Chain.current->user	//freaky.....
 
 
initchain();

* Clean up dict....

to do
------
- start screen
- icon
- config
- scoring
  - coins for completing chain? and for each word?
  - use coins to buy new backgrounds, tiles etc.
- save score on exit
- check handling of stop drawing events.
- hints. more complicated than it sounds.....
 - just have 'solve' - (lightbulb)
 - when complete, put message for 5s, then go to next
- 2 dictionaries - use 1_2_all_freq.txt as basis for code list, big one as check list.....
- speedup - try:
  - read once, count
  - malloc count * (wordlength+1) bytes (returns ptr to char?)
  - remember count!
  - scan dict by ptr += wl+1
  - spot dict end by count.
  - WORKS! Much quicker, but new_word still a little slow;
    Does 4 passes through dict:
     count
     copy to ram
     pick random word
     find seek points.[seek points only used by isindict(), in turn only used to check user word, i.e. not very often.....
       so could make isindict() use ramdict, and then prob don't need seek points.....
     pick random from ram dict.
    *count once at startup (4 & 5)
    copy once at startup? (4&5 - need to swap pointers on length selection)
- Segoe MDL2 Assets has light bulb, setting cog (EA80, E713)

google material design light bulb e90f, settings e8b8 back e15e

hmmmm.... icons drawn directly as png? i.e. not via pov......
white partly transparent circle, black icon for solve (light bulb) back (arrow) settings (cog) just black icon for thinking (brain)

...maybe better in pov....

Settings icon??

Home, big play icon, long thin button below for play timed.
  chain??

colours, menu at top for backgrounds / tiles
  show background, borders, change on tap, unlock on tap.

Different approach to speedup: don't do it on the fly, write some (PC) code to make all possible lists from dict,
  store first/last words in file (or entire chain?) entire chain would allow hints. 
  No need for separators, 4x4 chain = 16 bytes, 5x5 = 25

Letters slow to load (bigger files, more complicated decompression algorithm??)
SO:
  - restrict number (make many with each pattern, select few of each)
  - load at startup 
  - only load unlocked (load new when unlocking....)
  - al_file_exists??

Info / instructions:

data structures:
  ALLEGRO_BITMAP *alpha;	//global/extern current
  ALLEGRO_BITMAP *alphas[100];  //global/extern all (populated with purchased ones)
  
  StateType State;
        int bg;			
        int alpha;		//index into ALLEGRO_BITMAP *alphas[100] / bit ref into long int alphas[4];
        long int bgs[4];
    	long int alphas[4];	//bit mask for enabled/purchased.

TBD:
* Home screen
* Timed play
* pretty up messages
* store selected bg/tiles
* Tweak buttons (fewer on home screen?)
* dictionary additions
* icon
* adaptive icon
* nicer backgrounds
- Info screen improve


